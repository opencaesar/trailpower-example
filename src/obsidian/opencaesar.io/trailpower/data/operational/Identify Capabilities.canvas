{
	"nodes":[
		{"id":"a11c15f05417f986","type":"text","text":"# Operational Capabilities\n\nIdentify capabilities of systems that involve operational entities:\n\n```dataviewjs\nconst {fieldModifier: f} = this.app.plugins.plugins[\"metadata-menu\"].api;\n\ndv.table(['Capability', 'isSupportedBy', 'involves'], \n\t dv.pages('#operation/Capability and !\"metadata/templates\"')\n\t\t .sort(p => p.file.name)\n\t\t .map(p => [ p.file.link, \n\t\t\t\t\t f(dv, p, \"isSupportedBy\", {options: {\n\t\t\t\t\t   alwaysOn: true, showAddField: true, inFrontmatter: true}}), \n\t\t\t\t\t f(dv, p, \"involves\", {options: {\n\t\t\t\t\t   alwaysOn: true, showAddField: true, inFrontmatter: true}}) \n\t\t ])\n\t)\n```\n\n`BUTTON[capability-button]`\n\n```meta-bind-button\nlabel: New Capability\nicon: \"\"\nhidden: true\nclass: \"\"\ntooltip: Adds a new Capability\nid: capability-button\nstyle: primary\nactions:\n  - type: templaterCreateNote\n    templateFile: metadata/templates/operation/New Capability.md\n    folderPath: data/operational/capabilities\n    fileName: New Capability\n    openNote: true\n    openIfAlreadyExists: true\n\n```\n\n","x":-800,"y":-2180,"width":800,"height":540,"color":"1"},
		{"id":"2df8a855affb9187","type":"text","text":"# Operational Capabilities\n```dataviewjs\nvar s = ''\ns += '```plantuml-svg\\n';\ns += 'left to right direction\\n'\nconst capabilities = dv.pages('#operation/Capability and !\"metadata/templates\"');\nconst actors = dv.pages('#operation/Actor and !\"metadata/templates\"');\nactors?.forEach(i => s += 'actor \"'+i.file.name+'\" as '+i.file.name.replaceAll(\" \", \"_\")+' [[['+i.file.name+']]]\\n');\nconst entities = dv.pages('#operation/Entity and !\"metadata/templates\"');\nentities?.forEach(i => s += 'rectangle \"'+i.file.name+'\" as '+i.file.name.replaceAll(\" \", \"_\")+' [[['+i.file.name+']]]\\n');\nconst systems = dv.pages('#component/System and !\"metadata/templates\"');\nsystems?.forEach(i => { \n\ts += 'rectangle \"'+i.file.name+'\" as '+i.file.name.replaceAll(\" \", \"_\")+' [[['+i.file.name+']]] {\\n'\n\tcapabilities?.filter(j => j.isSupportedBy?.path == i.file.path)\n\t\t.forEach(j => s += '    usecase \"'+j.file.name+'\" as ('+j.file.name.replaceAll(\" \", \"_\")+') [[['+j.file.name+']]]\\n')\n\ts += '}\\n'\n});\ncapabilities?.forEach(i => {\n\ti.involves?.filter(j => dv.page(j)?.tags == \"operation/Actor\")\n\t\t.forEach(j => s += dv.page(j).file.name.replaceAll(\" \", \"_\")+\" <-- (\"+i.file.name.replaceAll(\" \", \"_\")+')\\n')\n});\ncapabilities?.forEach(i => {\n\ti.involves?.filter(j => dv.page(j)?.tags == \"operation/Entity\")\n\t\t.forEach(j => s += '(' + i.file.name.replaceAll(\" \", \"_\")+\") --> \"+dv.page(j).file.name.replaceAll(\" \", \"_\")+'\\n')\n});\ns += '```'\ndv.paragraph(s);\n```\n","x":20,"y":-2180,"width":640,"height":720}
	],
	"edges":[]
}