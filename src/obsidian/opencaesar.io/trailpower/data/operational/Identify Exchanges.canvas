{
	"nodes":[
		{"id":"a11c15f05417f986","type":"text","text":"# Operational Exchanges\n\nIdentify exchanges between functions of operational entities:\n\n```dataviewjs\nconst {fieldModifier: f} = this.app.plugins.plugins[\"metadata-menu\"].api;\n\ndv.table(['Exchange', 'hasSource', 'hasTarget', 'transmits', 'implements'], \n\t dv.pages('#function/Exchange and !\"metadata/templates\"')\n\t\t .sort(p => p.file.name)\n\t\t .map(p => [ p.file.link, \n\t\t\t\t\t f(dv, p, \"hasSource\", {options: {\n\t\t\t\t\t   alwaysOn: true, showAddField: true, inFrontmatter: true}}),\n\t\t\t\t\t f(dv, p, \"hasTarget\", {options: {\n\t\t\t\t\t   alwaysOn: true, showAddField: true, inFrontmatter: true}}),\n\t\t\t\t\t f(dv, p, \"transmits\", {options: {\n\t\t\t\t\t   alwaysOn: true, showAddField: true, inFrontmatter: true}}),\n\t\t\t\t\t f(dv, p, \"implements\", {options: {\n\t\t\t\t\t   alwaysOn: true, showAddField: true, inFrontmatter: true}})\n\t\t])\n\t)\n```\n\n`BUTTON[exchange-button]`\n\n```meta-bind-button\nlabel: New Exchange\nicon: \"\"\nhidden: true\nclass: \"\"\ntooltip: Adds a new Exchange\nid: exchange-button\nstyle: primary\nactions:\n  - type: templaterCreateNote\n    templateFile: metadata/templates/function/New Exchange.md\n    folderPath: data/operational/exchanges\n    fileName: New Exchange\n    openNote: true\n    openIfAlreadyExists: true\n\n```\n\n","x":-1740,"y":-2400,"width":1260,"height":660,"color":"1"},
		{"id":"2df8a855affb9187","type":"text","text":"# Operational Exchanges\n```dataviewjs\nvar s = ''\ns += '```plantuml-svg\\n';\ns += 'left to right direction\\n';\ns += 'allowmixing\\n'\ns += 'skinparam componentStyle rectangle\\n';\nconst exchanges = dv.pages('#function/Exchange and !\"metadata/templates\"');\nconst functions = dv.pages('#function/Function and !\"metadata/templates\"');\nconst entities = dv.pages('(#operation/Entity or #operation/Actor or #component/System) and !\"metadata/templates\"');\nentities?.forEach(i => {\n\ts += 'component \"'+i.file.name+'\" as '+i.file.name.replaceAll(\" \", \"_\")+' [[['+i.file.name+']]] {\\n'\n\tfunctions?.filter(j => j.isPerformedBy?.path == i.file.path)\n\t\t.forEach(j => s += '  component \"'+j.file.name+'\" as '+j.file.name.replaceAll(\" \", \"_\")+' <<function>> [[['+j.file.name+']]]\\n');\n\ts += '}\\n'\n});\nexchanges.filter(p => p.hasSource?.length>0 && p.hasTarget?.length>0)\n.forEach(i => s += dv.page(i.hasSource[0]).file.name.replaceAll(\" \", \"_\") +\" --> \"+dv.page(i.hasTarget[0]).file.name.replaceAll(\" \", \"_\")+(i.transmits != null ? '[[['+dv.page(i.transmits).file.name+']]] : '+dv.page(i.transmits).file.name : '')+'\\n');\ns += '```'\ndv.paragraph(s);\n```\n","x":-1740,"y":-1680,"width":1440,"height":1060}
	],
	"edges":[]
}